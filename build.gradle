import com.github.spotbugs.snom.SpotBugsReport
import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.spotbugs' version '5.0.13'
    id 'jacoco'
}

springBoot {
    mainClass = 'com.bcnc.pricesapi.PricesApiApplication'
}

tasks.named('bootJar') {
}

tasks.withType(Jar).configureEach {
}

group = 'com.bcnc'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
}

jacoco {
    toolVersion = "0.8.10" // Usa la última versión disponible
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

spotbugs {
    toolVersion = '4.9.3'
    ignoreFailures = false
    effort = 'max'
    reportLevel = 'high'
}

tasks.withType(SpotBugsTask).configureEach {
    reports(({
        xml.required = true
        html.required = true
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
}

test {
    jvmArgs += ["-Djdk.attach.allowAttachSelf=true"]
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register('integrationTest', Test) {
    description = 'Ejecuta los tests de integración'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.jacocoTestReport {
    dependsOn tasks.test, tasks.integrationTest
    reports {
        xml.required = true
        html.required = true
    }
}

tasks.jacocoTestCoverageVerification {
    dependsOn tasks.jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.8 // 80% de cobertura mínima (ajústalo si necesitas otro umbral)
            }
        }
    }
}

tasks.named('processIntegrationTestResources') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

check.dependsOn jacocoTestCoverageVerification
