plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    //id 'jacoco'
}

group = 'com.bcnc'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // Dependencias para los tests de integración
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
}

/*
jacoco {
    toolVersion = "0.8.11" // o la versión más reciente
}
*/

tasks.named('test') {
    useJUnitPlatform()
}
/*
tasks.named('jacocoTestReport') {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

tasks.named('jacocoTestCoverageVerification') {
    violationRules {
        rule {
            enabled = true
            limits {
                minimum = 0.80 // 80% de cobertura mínima
            }
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('jacocoTestCoverageVerification')
}
*/

test {
    //jvmArgs '-XX:+EnableDynamicAgentLoading'
    jvmArgs += ["-Djdk.attach.allowAttachSelf=true"]
}

// Definir un nuevo sourceSet para los tests de integración
sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

// Configurar las dependencias para los tests de integración
configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

// Definir la tarea para ejecutar los tests de integración
tasks.register('integrationTest', Test) {
    description = 'Ejecuta los tests de integración'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
}

tasks.named('processIntegrationTestResources') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Asegurar que check también ejecute los tests de integración
check.dependsOn integrationTest
